/* 
 * Squiggle API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Squiggle.Client;
using Squiggle.Model;

namespace Squiggle.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new address
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>AddressResponseSingle</returns>
        AddressResponseSingle AddAddress (Address data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new address
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of AddressResponseSingle</returns>
        ApiResponse<AddressResponseSingle> AddAddressWithHttpInfo (Address data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new file
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>FileResponseSingle</returns>
        FileResponseSingle AddFile (System.IO.Stream file, string name = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new file
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of FileResponseSingle</returns>
        ApiResponse<FileResponseSingle> AddFileWithHttpInfo (System.IO.Stream file, string name = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new global template
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>GlobalTemplateResponseSingle</returns>
        GlobalTemplateResponseSingle AddGlobalTemplate (GlobalTemplate data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new global template
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of GlobalTemplateResponseSingle</returns>
        ApiResponse<GlobalTemplateResponseSingle> AddGlobalTemplateWithHttpInfo (GlobalTemplate data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new snippet
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>SnippetResponseSingle</returns>
        SnippetResponseSingle AddSnippet (Snippet data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new snippet
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of SnippetResponseSingle</returns>
        ApiResponse<SnippetResponseSingle> AddSnippetWithHttpInfo (Snippet data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new template
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>TemplateResponseSingle</returns>
        TemplateResponseSingle AddTemplate (Template data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new template
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of TemplateResponseSingle</returns>
        ApiResponse<TemplateResponseSingle> AddTemplateWithHttpInfo (Template data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new user
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>UserResponseSingle</returns>
        UserResponseSingle AddUser (User data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new user
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of UserResponseSingle</returns>
        ApiResponse<UserResponseSingle> AddUserWithHttpInfo (User data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to delete</param>
        /// <returns></returns>
        void DeleteAddress (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAddressWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <returns></returns>
        void DeleteFile (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to delete</param>
        /// <returns></returns>
        void DeleteGlobalTemplate (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteGlobalTemplateWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to delete</param>
        /// <returns></returns>
        void DeleteSnippet (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSnippetWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to delete</param>
        /// <returns></returns>
        void DeleteTemplate (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplateWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns></returns>
        void DeleteUser (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to update</param>
        /// <param name="data"></param>
        /// <returns>AddressResponseSingle</returns>
        AddressResponseSingle EditAddress (long? id, Address data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of AddressResponseSingle</returns>
        ApiResponse<AddressResponseSingle> EditAddressWithHttpInfo (long? id, Address data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>FileResponseSingle</returns>
        FileResponseSingle EditFile (long? id, System.IO.Stream file = null, string name = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of FileResponseSingle</returns>
        ApiResponse<FileResponseSingle> EditFileWithHttpInfo (long? id, System.IO.Stream file = null, string name = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to update</param>
        /// <param name="data"></param>
        /// <returns>GlobalTemplateResponseSingle</returns>
        GlobalTemplateResponseSingle EditGlobalTemplate (long? id, GlobalTemplate data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of GlobalTemplateResponseSingle</returns>
        ApiResponse<GlobalTemplateResponseSingle> EditGlobalTemplateWithHttpInfo (long? id, GlobalTemplate data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to update</param>
        /// <param name="data"></param>
        /// <returns>SnippetResponseSingle</returns>
        SnippetResponseSingle EditSnippet (long? id, Snippet data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of SnippetResponseSingle</returns>
        ApiResponse<SnippetResponseSingle> EditSnippetWithHttpInfo (long? id, Snippet data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to update</param>
        /// <param name="data"></param>
        /// <returns>TemplateResponseSingle</returns>
        TemplateResponseSingle EditTemplate (long? id, Template data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of TemplateResponseSingle</returns>
        ApiResponse<TemplateResponseSingle> EditTemplateWithHttpInfo (long? id, Template data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to update</param>
        /// <param name="data"></param>
        /// <returns>UserResponseSingle</returns>
        UserResponseSingle EditUser (long? id, User data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of UserResponseSingle</returns>
        ApiResponse<UserResponseSingle> EditUserWithHttpInfo (long? id, User data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets addresses
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>AddressResponseMultiple</returns>
        AddressResponseMultiple FindAddresses (int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets addresses
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of AddressResponseMultiple</returns>
        ApiResponse<AddressResponseMultiple> FindAddressesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets files
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>FileResponseMultiple</returns>
        FileResponseMultiple FindFiles (int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets files
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of FileResponseMultiple</returns>
        ApiResponse<FileResponseMultiple> FindFilesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets global templates
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>GlobalTemplateResponseMultiple</returns>
        GlobalTemplateResponseMultiple FindGlobalTemplates (int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets global templates
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of GlobalTemplateResponseMultiple</returns>
        ApiResponse<GlobalTemplateResponseMultiple> FindGlobalTemplatesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets snippets
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>SnippetResponseMultiple</returns>
        SnippetResponseMultiple FindSnippets (int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets snippets
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of SnippetResponseMultiple</returns>
        ApiResponse<SnippetResponseMultiple> FindSnippetsWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets templates
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>TemplateResponseMultiple</returns>
        TemplateResponseMultiple FindTemplates (int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets templates
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of TemplateResponseMultiple</returns>
        ApiResponse<TemplateResponseMultiple> FindTemplatesWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets users
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>UserResponseMultiple</returns>
        UserResponseMultiple FindUsers (int? offset = null, int? limit = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets users
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of UserResponseMultiple</returns>
        ApiResponse<UserResponseMultiple> FindUsersWithHttpInfo (int? offset = null, int? limit = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to get</param>
        /// <returns>AddressResponseSingle</returns>
        AddressResponseSingle GetAddress (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an address with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to get</param>
        /// <returns>ApiResponse of AddressResponseSingle</returns>
        ApiResponse<AddressResponseSingle> GetAddressWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request JWT for Address
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>JSONWebTokenResponse</returns>
        JSONWebTokenResponse GetAddressToken (LoginDetails data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request JWT for Address
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of JSONWebTokenResponse</returns>
        ApiResponse<JSONWebTokenResponse> GetAddressTokenWithHttpInfo (LoginDetails data);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to get</param>
        /// <returns>FileResponseSingle</returns>
        FileResponseSingle GetFile (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a file with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to get</param>
        /// <returns>ApiResponse of FileResponseSingle</returns>
        ApiResponse<FileResponseSingle> GetFileWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to get</param>
        /// <returns>GlobalTemplateResponseSingle</returns>
        GlobalTemplateResponseSingle GetGlobalTemplate (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a global template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to get</param>
        /// <returns>ApiResponse of GlobalTemplateResponseSingle</returns>
        ApiResponse<GlobalTemplateResponseSingle> GetGlobalTemplateWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to get</param>
        /// <returns>SnippetResponseSingle</returns>
        SnippetResponseSingle GetSnippet (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a snippet with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to get</param>
        /// <returns>ApiResponse of SnippetResponseSingle</returns>
        ApiResponse<SnippetResponseSingle> GetSnippetWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to get</param>
        /// <returns>TemplateResponseSingle</returns>
        TemplateResponseSingle GetTemplate (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a template with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to get</param>
        /// <returns>ApiResponse of TemplateResponseSingle</returns>
        ApiResponse<TemplateResponseSingle> GetTemplateWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to get</param>
        /// <returns>UserResponseSingle</returns>
        UserResponseSingle GetUser (long? id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a user with the specified ID
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to get</param>
        /// <returns>ApiResponse of UserResponseSingle</returns>
        ApiResponse<UserResponseSingle> GetUserWithHttpInfo (long? id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request JWT for User
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>JSONWebTokenResponse</returns>
        JSONWebTokenResponse GetUserToken (LoginDetails data);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Request JWT for User
        /// </remarks>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of JSONWebTokenResponse</returns>
        ApiResponse<JSONWebTokenResponse> GetUserTokenWithHttpInfo (LoginDetails data);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Squiggle.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Squiggle.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Squiggle.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Squiggle.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Creates a new address
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>AddressResponseSingle</returns>
        public AddressResponseSingle AddAddress (Address data)
        {
             ApiResponse<AddressResponseSingle> localVarResponse = AddAddressWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new address
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of AddressResponseSingle</returns>
        public ApiResponse< AddressResponseSingle > AddAddressWithHttpInfo (Address data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->AddAddress");

            var localVarPath = "/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressResponseSingle)));
            
        }

        /// <summary>
        ///  Upload a new file
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>FileResponseSingle</returns>
        public FileResponseSingle AddFile (System.IO.Stream file, string name = null)
        {
             ApiResponse<FileResponseSingle> localVarResponse = AddFileWithHttpInfo(file, name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a new file
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file"></param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of FileResponseSingle</returns>
        public ApiResponse< FileResponseSingle > AddFileWithHttpInfo (System.IO.Stream file, string name = null)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new ApiException(400, "Missing required parameter 'file' when calling DefaultApi->AddFile");

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileResponseSingle)));
            
        }

        /// <summary>
        ///  Creates a new global template
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>GlobalTemplateResponseSingle</returns>
        public GlobalTemplateResponseSingle AddGlobalTemplate (GlobalTemplate data)
        {
             ApiResponse<GlobalTemplateResponseSingle> localVarResponse = AddGlobalTemplateWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new global template
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of GlobalTemplateResponseSingle</returns>
        public ApiResponse< GlobalTemplateResponseSingle > AddGlobalTemplateWithHttpInfo (GlobalTemplate data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->AddGlobalTemplate");

            var localVarPath = "/global-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddGlobalTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalTemplateResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalTemplateResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalTemplateResponseSingle)));
            
        }

        /// <summary>
        ///  Creates a new snippet
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>SnippetResponseSingle</returns>
        public SnippetResponseSingle AddSnippet (Snippet data)
        {
             ApiResponse<SnippetResponseSingle> localVarResponse = AddSnippetWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new snippet
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of SnippetResponseSingle</returns>
        public ApiResponse< SnippetResponseSingle > AddSnippetWithHttpInfo (Snippet data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->AddSnippet");

            var localVarPath = "/snippets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnippetResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnippetResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnippetResponseSingle)));
            
        }

        /// <summary>
        ///  Creates a new template
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>TemplateResponseSingle</returns>
        public TemplateResponseSingle AddTemplate (Template data)
        {
             ApiResponse<TemplateResponseSingle> localVarResponse = AddTemplateWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new template
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of TemplateResponseSingle</returns>
        public ApiResponse< TemplateResponseSingle > AddTemplateWithHttpInfo (Template data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->AddTemplate");

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateResponseSingle)));
            
        }

        /// <summary>
        ///  Creates a new user
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>UserResponseSingle</returns>
        public UserResponseSingle AddUser (User data)
        {
             ApiResponse<UserResponseSingle> localVarResponse = AddUserWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new user
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of UserResponseSingle</returns>
        public ApiResponse< UserResponseSingle > AddUserWithHttpInfo (User data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->AddUser");

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponseSingle)));
            
        }

        /// <summary>
        ///  Deletes an address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to delete</param>
        /// <returns></returns>
        public void DeleteAddress (long? id)
        {
             DeleteAddressWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes an address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAddressWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteAddress");

            var localVarPath = "/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Deletes a file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <returns></returns>
        public void DeleteFile (long? id)
        {
             DeleteFileWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes a file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteFileWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteFile");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFile", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Deletes a global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to delete</param>
        /// <returns></returns>
        public void DeleteGlobalTemplate (long? id)
        {
             DeleteGlobalTemplateWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes a global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteGlobalTemplateWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteGlobalTemplate");

            var localVarPath = "/global-templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteGlobalTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Deletes a snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to delete</param>
        /// <returns></returns>
        public void DeleteSnippet (long? id)
        {
             DeleteSnippetWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes a snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteSnippetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteSnippet");

            var localVarPath = "/snippets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Deletes a template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to delete</param>
        /// <returns></returns>
        public void DeleteTemplate (long? id)
        {
             DeleteTemplateWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes a template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteTemplateWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteTemplate");

            var localVarPath = "/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Deletes a user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns></returns>
        public void DeleteUser (long? id)
        {
             DeleteUserWithHttpInfo(id);
        }

        /// <summary>
        ///  Deletes a user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteUserWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->DeleteUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUser", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Updates an existing address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to update</param>
        /// <param name="data"></param>
        /// <returns>AddressResponseSingle</returns>
        public AddressResponseSingle EditAddress (long? id, Address data)
        {
             ApiResponse<AddressResponseSingle> localVarResponse = EditAddressWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of AddressResponseSingle</returns>
        public ApiResponse< AddressResponseSingle > EditAddressWithHttpInfo (long? id, Address data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditAddress");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->EditAddress");

            var localVarPath = "/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressResponseSingle)));
            
        }

        /// <summary>
        ///  Updates an existing file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>FileResponseSingle</returns>
        public FileResponseSingle EditFile (long? id, System.IO.Stream file = null, string name = null)
        {
             ApiResponse<FileResponseSingle> localVarResponse = EditFileWithHttpInfo(id, file, name);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to update</param>
        /// <param name="file"> (optional)</param>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of FileResponseSingle</returns>
        public ApiResponse< FileResponseSingle > EditFileWithHttpInfo (long? id, System.IO.Stream file = null, string name = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditFile");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (file != null) localVarFileParams.Add("file", Configuration.ApiClient.ParameterToFile("file", file));
            if (name != null) localVarFormParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // form parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileResponseSingle)));
            
        }

        /// <summary>
        ///  Updates an existing global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to update</param>
        /// <param name="data"></param>
        /// <returns>GlobalTemplateResponseSingle</returns>
        public GlobalTemplateResponseSingle EditGlobalTemplate (long? id, GlobalTemplate data)
        {
             ApiResponse<GlobalTemplateResponseSingle> localVarResponse = EditGlobalTemplateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of GlobalTemplateResponseSingle</returns>
        public ApiResponse< GlobalTemplateResponseSingle > EditGlobalTemplateWithHttpInfo (long? id, GlobalTemplate data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditGlobalTemplate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->EditGlobalTemplate");

            var localVarPath = "/global-templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditGlobalTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalTemplateResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalTemplateResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalTemplateResponseSingle)));
            
        }

        /// <summary>
        ///  Updates an existing snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to update</param>
        /// <param name="data"></param>
        /// <returns>SnippetResponseSingle</returns>
        public SnippetResponseSingle EditSnippet (long? id, Snippet data)
        {
             ApiResponse<SnippetResponseSingle> localVarResponse = EditSnippetWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of SnippetResponseSingle</returns>
        public ApiResponse< SnippetResponseSingle > EditSnippetWithHttpInfo (long? id, Snippet data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditSnippet");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->EditSnippet");

            var localVarPath = "/snippets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnippetResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnippetResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnippetResponseSingle)));
            
        }

        /// <summary>
        ///  Updates an existing template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to update</param>
        /// <param name="data"></param>
        /// <returns>TemplateResponseSingle</returns>
        public TemplateResponseSingle EditTemplate (long? id, Template data)
        {
             ApiResponse<TemplateResponseSingle> localVarResponse = EditTemplateWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of TemplateResponseSingle</returns>
        public ApiResponse< TemplateResponseSingle > EditTemplateWithHttpInfo (long? id, Template data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditTemplate");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->EditTemplate");

            var localVarPath = "/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateResponseSingle)));
            
        }

        /// <summary>
        ///  Updates an existing user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to update</param>
        /// <param name="data"></param>
        /// <returns>UserResponseSingle</returns>
        public UserResponseSingle EditUser (long? id, User data)
        {
             ApiResponse<UserResponseSingle> localVarResponse = EditUserWithHttpInfo(id, data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to update</param>
        /// <param name="data"></param>
        /// <returns>ApiResponse of UserResponseSingle</returns>
        public ApiResponse< UserResponseSingle > EditUserWithHttpInfo (long? id, User data)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->EditUser");
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->EditUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponseSingle)));
            
        }

        /// <summary>
        ///  Gets addresses
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>AddressResponseMultiple</returns>
        public AddressResponseMultiple FindAddresses (int? offset = null, int? limit = null)
        {
             ApiResponse<AddressResponseMultiple> localVarResponse = FindAddressesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets addresses
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of AddressResponseMultiple</returns>
        public ApiResponse< AddressResponseMultiple > FindAddressesWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressResponseMultiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressResponseMultiple) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressResponseMultiple)));
            
        }

        /// <summary>
        ///  Gets files
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>FileResponseMultiple</returns>
        public FileResponseMultiple FindFiles (int? offset = null, int? limit = null)
        {
             ApiResponse<FileResponseMultiple> localVarResponse = FindFilesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets files
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of FileResponseMultiple</returns>
        public ApiResponse< FileResponseMultiple > FindFilesWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileResponseMultiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileResponseMultiple) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileResponseMultiple)));
            
        }

        /// <summary>
        ///  Gets global templates
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>GlobalTemplateResponseMultiple</returns>
        public GlobalTemplateResponseMultiple FindGlobalTemplates (int? offset = null, int? limit = null)
        {
             ApiResponse<GlobalTemplateResponseMultiple> localVarResponse = FindGlobalTemplatesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets global templates
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of GlobalTemplateResponseMultiple</returns>
        public ApiResponse< GlobalTemplateResponseMultiple > FindGlobalTemplatesWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/global-templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindGlobalTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalTemplateResponseMultiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalTemplateResponseMultiple) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalTemplateResponseMultiple)));
            
        }

        /// <summary>
        ///  Gets snippets
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>SnippetResponseMultiple</returns>
        public SnippetResponseMultiple FindSnippets (int? offset = null, int? limit = null)
        {
             ApiResponse<SnippetResponseMultiple> localVarResponse = FindSnippetsWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets snippets
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of SnippetResponseMultiple</returns>
        public ApiResponse< SnippetResponseMultiple > FindSnippetsWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/snippets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindSnippets", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnippetResponseMultiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnippetResponseMultiple) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnippetResponseMultiple)));
            
        }

        /// <summary>
        ///  Gets templates
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>TemplateResponseMultiple</returns>
        public TemplateResponseMultiple FindTemplates (int? offset = null, int? limit = null)
        {
             ApiResponse<TemplateResponseMultiple> localVarResponse = FindTemplatesWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets templates
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of TemplateResponseMultiple</returns>
        public ApiResponse< TemplateResponseMultiple > FindTemplatesWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateResponseMultiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateResponseMultiple) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateResponseMultiple)));
            
        }

        /// <summary>
        ///  Gets users
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>UserResponseMultiple</returns>
        public UserResponseMultiple FindUsers (int? offset = null, int? limit = null)
        {
             ApiResponse<UserResponseMultiple> localVarResponse = FindUsersWithHttpInfo(offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets users
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">The start offset of the result set (optional)</param>
        /// <param name="limit">Max records to return (optional)</param>
        /// <returns>ApiResponse of UserResponseMultiple</returns>
        public ApiResponse< UserResponseMultiple > FindUsersWithHttpInfo (int? offset = null, int? limit = null)
        {

            var localVarPath = "/users";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FindUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponseMultiple>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponseMultiple) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponseMultiple)));
            
        }

        /// <summary>
        ///  Gets an address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to get</param>
        /// <returns>AddressResponseSingle</returns>
        public AddressResponseSingle GetAddress (long? id)
        {
             ApiResponse<AddressResponseSingle> localVarResponse = GetAddressWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an address with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of address to get</param>
        /// <returns>ApiResponse of AddressResponseSingle</returns>
        public ApiResponse< AddressResponseSingle > GetAddressWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetAddress");

            var localVarPath = "/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddressResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddressResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddressResponseSingle)));
            
        }

        /// <summary>
        ///  Request JWT for Address
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>JSONWebTokenResponse</returns>
        public JSONWebTokenResponse GetAddressToken (LoginDetails data)
        {
             ApiResponse<JSONWebTokenResponse> localVarResponse = GetAddressTokenWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Request JWT for Address
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of JSONWebTokenResponse</returns>
        public ApiResponse< JSONWebTokenResponse > GetAddressTokenWithHttpInfo (LoginDetails data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->GetAddressToken");

            var localVarPath = "/token/address";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JSONWebTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JSONWebTokenResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JSONWebTokenResponse)));
            
        }

        /// <summary>
        ///  Gets a file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to get</param>
        /// <returns>FileResponseSingle</returns>
        public FileResponseSingle GetFile (long? id)
        {
             ApiResponse<FileResponseSingle> localVarResponse = GetFileWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a file with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of file to get</param>
        /// <returns>ApiResponse of FileResponseSingle</returns>
        public ApiResponse< FileResponseSingle > GetFileWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetFile");

            var localVarPath = "/files/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FileResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (FileResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(FileResponseSingle)));
            
        }

        /// <summary>
        ///  Gets a global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to get</param>
        /// <returns>GlobalTemplateResponseSingle</returns>
        public GlobalTemplateResponseSingle GetGlobalTemplate (long? id)
        {
             ApiResponse<GlobalTemplateResponseSingle> localVarResponse = GetGlobalTemplateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a global template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of global template to get</param>
        /// <returns>ApiResponse of GlobalTemplateResponseSingle</returns>
        public ApiResponse< GlobalTemplateResponseSingle > GetGlobalTemplateWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetGlobalTemplate");

            var localVarPath = "/global-templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGlobalTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GlobalTemplateResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GlobalTemplateResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GlobalTemplateResponseSingle)));
            
        }

        /// <summary>
        ///  Gets a snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to get</param>
        /// <returns>SnippetResponseSingle</returns>
        public SnippetResponseSingle GetSnippet (long? id)
        {
             ApiResponse<SnippetResponseSingle> localVarResponse = GetSnippetWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a snippet with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of snippet to get</param>
        /// <returns>ApiResponse of SnippetResponseSingle</returns>
        public ApiResponse< SnippetResponseSingle > GetSnippetWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetSnippet");

            var localVarPath = "/snippets/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSnippet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SnippetResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SnippetResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SnippetResponseSingle)));
            
        }

        /// <summary>
        ///  Gets a template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to get</param>
        /// <returns>TemplateResponseSingle</returns>
        public TemplateResponseSingle GetTemplate (long? id)
        {
             ApiResponse<TemplateResponseSingle> localVarResponse = GetTemplateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a template with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of template to get</param>
        /// <returns>ApiResponse of TemplateResponseSingle</returns>
        public ApiResponse< TemplateResponseSingle > GetTemplateWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetTemplate");

            var localVarPath = "/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TemplateResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateResponseSingle)));
            
        }

        /// <summary>
        ///  Gets a user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to get</param>
        /// <returns>UserResponseSingle</returns>
        public UserResponseSingle GetUser (long? id)
        {
             ApiResponse<UserResponseSingle> localVarResponse = GetUserWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a user with the specified ID
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of user to get</param>
        /// <returns>ApiResponse of UserResponseSingle</returns>
        public ApiResponse< UserResponseSingle > GetUserWithHttpInfo (long? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->GetUser");

            var localVarPath = "/users/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (jwt) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UserResponseSingle>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UserResponseSingle) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserResponseSingle)));
            
        }

        /// <summary>
        ///  Request JWT for User
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>JSONWebTokenResponse</returns>
        public JSONWebTokenResponse GetUserToken (LoginDetails data)
        {
             ApiResponse<JSONWebTokenResponse> localVarResponse = GetUserTokenWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Request JWT for User
        /// </summary>
        /// <exception cref="Squiggle.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of JSONWebTokenResponse</returns>
        public ApiResponse< JSONWebTokenResponse > GetUserTokenWithHttpInfo (LoginDetails data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->GetUserToken");

            var localVarPath = "/token/user";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JSONWebTokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JSONWebTokenResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JSONWebTokenResponse)));
            
        }

    }
}
